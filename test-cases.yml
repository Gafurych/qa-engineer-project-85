---
- summary: |
    Проверка регистрации существующего пользователя
  requirement: |
    Нельзя зарегистрировать существующего пользователя
  prerequisites: |
    Открыта страница регистрации
  test-data: |
    Тестовые данные
    nickname = hexlet email = hexlet@mail.ru Пароль = password
  steps:
    - Вводим nickname
    - Вводим email
    - Вводим password
    - Нажимаем кнопку «submit»
  expected-result: |
    Пользователь не зарегистрирован

- summary: |
    Проверка успешной регистрации пользователя
  requirement: |
    Пользователь должен быть зарегистрирован
  prerequisites: |
    Открыта страница регистрации
  test-data: |
    Тестовые данные
    no data
  steps:
    - Вводим nickname
    - Вводим email
    - Вводим password
    - Нажимаем кнопку «submit»
  expected-result: |
    Пользователь успешно зарегистрирован

- summary: |
    Проверка успешной авторизации пользователя
  requirement: |
    При верном вводе email и пароля пользователь должен войти в систему
  prerequisites: |
    Открыта страница авторизации
  test-data: |
    Тестовые данные
    email = hexlet@mail.ru Пароль = password
  steps:
    - Вводим email
    - Вводим password
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь авторизован

- summary: |
    Проверка авторизации с несуществующим email 
  requirement: |
    При несуществующем email пользователь должен получить сообщение об ошибке
  prerequisites:
    Открыта страница авторизации
  test-data: |
    email = test@bk.ru Пароль = testtest
  steps:
    - Вводим email
    - Вводим password
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь не авторизован

- summary: |
    Проверка победы пользователя в игре c ботом
  requirement: |
    Победа игрока при верном решении задачи 
  prerequisites: |
    Пользователь авторизован
  test-data: |
    const _ = require("lodash");
    const R = require("rambda");
    const solution = (width, length) => {
    return width * length;
    };
    module.exports = solution;
  steps:
    - Нажать кнопку "create a game"
    - Выбрать Level (Уровень) с одной звездой
    - Выбрать Game Type "With a bot"
    - Выбрать Time control
    - Выбрать задачу "rect_area"
    - Нажать "create battle"
    - Выбрать язык Node.js
    - Ввести тестовые данные
    - Нажать кнопку "Run"
  expected-result: |
    Уведомление пользователя о победе

- summary: |
    Проверка создания игры без регистрации 
  requirement: |
    Пользователь может создать игру без регистрации
  prerequisites:
    no empty
  test-data: |
    no empty
  steps:
    - Нажимаем кнопку «Try simple battle»
  expected-result: |
    Игра создана

- summary: |
    Проверка создания игры с другим пользователем
  requirement: |
    Пользователь может создать игру с другим пользователем
  prerequisites:
    Пользователь авторизован
  test-data: |
    no empty
  steps:
    - Нажать кнопку "create a game"
    - Выбрать любой Level (Уровень) 
    - Выбрать Game Type "With other users"
    - Выбрать "Time control"
    - Выбрать "random task"
    - Нажать "create battle"
  expected-result: |
    Игра создана

- summary: |
    Проверка успешной авторизации через Github
  requirement: |
    Пользователь должен авторизоваться через Github
  prerequisites:
    Пользователь зарегистрирован и авторизован на Github
  test-data: |
    no empty
  steps:
    - Нажать "Sign in with Github"
  expected-result: |
    Пользователь успешно авторизован

- summary: |
    Проверка успешной авторизации через Discord
  requirement: |
    Пользователь должен авторизоваться через Discord
  prerequisites:
    Пользователь зарегистрирован и авторизован на Discord
  test-data: |
    no empty
  steps:
    - Нажать "Sign in with Discord"
  expected-result: |
    Пользователь успешно авторизован
